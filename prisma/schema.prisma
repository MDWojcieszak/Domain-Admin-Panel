generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
  OWNER
}

enum AccountStatus {
  CREATED
  EMAIL_VERIFICATION
  ACTIVE
  DISABLED
}

enum SocialMediaType {
  FACEBOOK
  INSTAGRAM
  TWITTER
  TIKTOK
  LINKEDIN
  GITHUB
}

enum FileType {
  IMAGE
  PDF
  AUDIO
  VIDEO
  OTHER
}

enum ServerProcessStatus {
  UNKNOWN
  STARTED
  ONGOING
  CLOSED
  ENDED
  FAILED
}

enum ServerStatus {
  UNKNOWN
  OFFLINE
  ONLINE
  ERROR
  MAINTENANCE
  WAKE_IN_PROGRESS
  SHUTDOWN_IN_PROGRESS
}

enum CommandType {
  MESSAGE
  EVENT
}

enum CommandStatus {
  ENABLED
  DISABLED
  RUNNING
}

enum ProcessLogLevel {
  LOG
  SUCCESS
  WARNING
  ERROR
}

enum SettingType {
  STRING
  NUMBER
}

enum DiskType {
  HDD
  SSD
  NVME
}

enum TaskType {
  TODO
  TAKE_ITEM
  CONVERSATION
  NOTE
  EVENT
  HABIT
  REMINDER
  AUTOMATION
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DEFERRED
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RepeatType {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  CUSTOM
}

enum CollaboratorRole {
  OWNER
  COLLABORATOR
  OBSERVER
}

enum ConnectedServiceType {
  GOOGLE
  TODOIST
  NOTION
  TELEGRAM
  N8N
  OPENAI
  OTHER
}

enum LocationType {
  HOME
  WORK
  TRAVEL
  CUSTOM
}

enum PlaceType {
  HOME
  WORK
  SHOP
  OTHER
}

enum PersonRelation {
  FAMILY
  FRIEND
  WORK
  OTHER
}

enum ApiKeyType {
  AI
  INTERNAL
  EXTERNAL
}

model User {
  id           String  @id @default(uuid())
  role         Role    @default(USER)
  email        String  @unique
  hashPassword String?

  accountStatus AccountStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  firstName     String?
  lastName      String?

  sessions        Session[]
  authorOfImages  ImageData[]   @relation("author")
  creatorOfImages ImageData[]   @relation("creator")
  socialMedia     SocialMedia[]

  avatar         Image?             @relation(fields: [avatarId], references: [id])
  avatarId       String?            @unique
  serverSessions Process[]
  startedServers ServerProperties[] @relation("StartedBy")
  stoppedServers ServerProperties[] @relation("StoppedBy")
  userSettings   UserSettings?

  locationId String?
  location   Location? @relation("UserLocation", fields: [locationId], references: [id])

  aiContext   AiContext? @relation(fields: [aiContextId], references: [id])
  aiContextId String?

  // Assistant relations
  personalTasks     Task[]
  persons           Person[]
  places            Place[]
  tags              Tag[]
  taskCustomFields  TaskCustomField[]
  taskComments      TaskComment[]
  taskActivities    TaskActivity[]
  achievements      Achievement[]
  taskCollaborators TaskCollaborator[]
  notifications     NotificationLog[]
  attachments       Attachment[]

  // API keys & integrations
  apiKeys           ApiKey[]
  connectedServices ConnectedService[]
}

model Person {
  id          String          @id @default(uuid())
  name        String
  nickname    String?
  email       String?
  phone       String?
  notes       String?
  birthday    DateTime?
  socialMedia SocialMedia[]
  avatarUrl   String?
  relation    PersonRelation?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  aiContext   AiContext? @relation(fields: [aiContextId], references: [id])
  aiContextId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  tasks Task[] @relation("PersonTasks")
}

model Location {
  id          String        @id @default(uuid())
  name        String?
  address     String?
  city        String?
  postalCode  String?
  country     String?
  latitude    Float?
  longitude   Float?
  radius      Int?
  description String?
  mapUrl      String?
  type        LocationType?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  aiContext   AiContext? @relation(fields: [aiContextId], references: [id])
  aiContextId String?

  users   User[]   @relation("UserLocation")
  persons Person[]
  places  Place[]
  tasks   Task[]
}

model Task {
  id              String       @id @default(uuid())
  description     String
  type            TaskType     @default(TODO)
  status          TaskStatus   @default(TODO)
  priority        TaskPriority @default(MEDIUM)
  dueDate         DateTime?
  repeat          RepeatType   @default(NONE)
  repeatCustom    String?
  estimatedTime   Int?
  actualTime      Int?
  energyLevel     String?
  moodRequired    String?
  calendarEventId String?
  notes           String?
  isTemplate      Boolean      @default(false)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  completedAt     DateTime?
  archived        Boolean      @default(false)
  score           Int          @default(0)
  reward          String?
  reminderAt      DateTime?
  isPrivate       Boolean      @default(false)

  aiSuggestions   Json?
  aiSummary       String?
  integrationMeta Json?
  syncStatus      String?
  externalSyncId  String?
  requiresApiKey  Boolean               @default(false)
  requiredService ConnectedServiceType?

  // Relations

  aiContext   AiContext? @relation(fields: [aiContextId], references: [id])
  aiContextId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  placeId String?
  place   Place?  @relation(fields: [placeId], references: [id])

  personId String?
  person   Person? @relation("PersonTasks", fields: [personId], references: [id])

  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  // Self-relations (subtasks)
  parentTaskId String?
  parentTask   Task?   @relation("Subtasks", fields: [parentTaskId], references: [id], map: "fk_task_parentTaskId")
  subtasks     Task[]  @relation("Subtasks")

  // Self-relations (blocking)
  blocks    TaskBlock[] @relation("Blocks")
  blockedBy TaskBlock[] @relation("BlockedBy")

  attachments   Attachment[]
  comments      TaskComment[]
  tags          TaskTag[]
  activities    TaskActivity[]
  checklist     TaskChecklistItem[]
  collaborators TaskCollaborator[]
  customFields  TaskCustomField[]
  achievements  Achievement[]
  notifications NotificationLog[]
}

model TaskBlock {
  blockerId String
  blockedId String

  blocker Task @relation("Blocks", fields: [blockerId], references: [id])
  blocked Task @relation("BlockedBy", fields: [blockedId], references: [id])

  @@id([blockerId, blockedId])
}

model Place {
  id          String     @id @default(uuid())
  name        String
  address     String?
  description String?
  type        PlaceType?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  aiContext   AiContext? @relation(fields: [aiContextId], references: [id])
  aiContextId String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  tasks Task[]
}

model TaskChecklistItem {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  content   String
  done      Boolean  @default(false)
  order     Int?
  createdAt DateTime @default(now())
}

model TaskCustomField {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  name      String
  value     String
  type      String?
  order     Int?
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Tag {
  id     String    @id @default(uuid())
  name   String
  color  String?
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  tasks  TaskTag[]
}

model TaskTag {
  id     String @id @default(uuid())
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String
}

model TaskActivity {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String
  timestamp DateTime @default(now())
  details   String?
}

model TaskComment {
  id        String   @id @default(uuid())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   String
  createdAt DateTime @default(now())
}

model Attachment {
  id           String   @id @default(uuid())
  fileUrl      String
  fileType     FileType
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId       String
  uploadedBy   User     @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  uploadedById String
  createdAt    DateTime @default(now())

  aiContext   AiContext? @relation(fields: [aiContextId], references: [id])
  aiContextId String?
}

model Achievement {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  name        String
  description String?
  achievedAt  DateTime @default(now())
  taskId      String?
  task        Task?    @relation(fields: [taskId], references: [id])

  aiContext   AiContext? @relation(fields: [aiContextId], references: [id])
  aiContextId String?
}

model TaskCollaborator {
  id        String           @id @default(uuid())
  task      Task             @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      CollaboratorRole @default(COLLABORATOR)
  createdAt DateTime         @default(now())
}

model NotificationLog {
  id     String    @id @default(uuid())
  task   Task?     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String?
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  type   String
  status String
  sentAt DateTime  @default(now())
  meta   Json?
  readAt DateTime?

  aiContext   AiContext? @relation(fields: [aiContextId], references: [id])
  aiContextId String?
}

model ApiKey {
  id        String               @id @default(uuid())
  user      User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?
  name      String?
  value     String
  service   ConnectedServiceType
  type      ApiKeyType
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  expiresAt DateTime?
  meta      Json?

  @@unique([userId, service, type])
  @@index([type])
}

model AiContext {
  id           String   @id @default(uuid())
  summary      String?
  keywords     Json?
  context      String?
  aiMeta       Json?
  aiConfidence Float?
  aiSource     String?
  aiHistory    Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  NotificationLog NotificationLog[]
  Achievement     Achievement[]
  Attachment      Attachment[]
  Task            Task[]
  Location        Location[]
  Place           Place[]
  Person          Person[]
  User            User[]
  AiHistory       AiHistory[]
}

model AiHistory {
  id          String    @id @default(uuid())
  aiContext   AiContext @relation(fields: [aiContextId], references: [id], onDelete: Cascade)
  aiContextId String

  timestamp  DateTime @default(now())
  action     String
  source     String?
  userPrompt String?
  aiResponse String?
  text       String?
  meta       Json?
}

model ConnectedService {
  id           String               @id @default(uuid())
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  type         ConnectedServiceType
  displayName  String?
  accessToken  String?
  refreshToken String?
  meta         Json?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  // AI context fields
  summary      String?
  keywords     Json?
  context      String?
  aiMeta       Json?
  aiConfidence Float?
  aiSource     String?
  aiHistory    Json?
}

model UserSettings {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  serverStatusEmailNotifications Boolean @default(true)
  serverIdleEmailNotifications   Boolean @default(false)
  serverPushNotifications        Boolean @default(false)
  processEmailNotifications      Boolean @default(true)
  processPushNotifications       Boolean @default(false)
}

model SocialMedia {
  id       String          @id @default(uuid())
  username String
  link     String
  type     SocialMediaType
  user     User?           @relation(fields: [userId], references: [id])
  userId   String?
  person   Person?         @relation(fields: [personId], references: [id])
  personId String?
}

model Session {
  id           String  @id
  platform     String?
  browser      String?
  os           String?
  refreshToken String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model ImageData {
  id           String   @id @default(uuid())
  localization String
  dateTaken    DateTime

  title       String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User    @relation(fields: [createdById], references: [id], name: "creator")
  createdById String
  author      User?   @relation(fields: [authorId], references: [id], name: "author")
  authorId    String?

  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String @unique
}

model Image {
  id           String      @id @default(uuid())
  originalUrl  String
  coverUrl     String
  lowResUrl    String
  data         ImageData?
  dimensions   Dimensions? @relation(fields: [dimensionsId], references: [id], onDelete: Cascade)
  dimensionsId String?     @unique
  avatar       User?
}

model Dimensions {
  id     String @id @default(uuid())
  width  String
  height String
  image  Image?
}

model Server {
  id   String @id @default(uuid())
  name String @unique

  ipAddress  String
  macAddress String?
  location   String?
  isDeleted  Boolean @default(false)

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  properties ServerProperties?
  categories ServerCategory[]
}

model ServerCategory {
  id       String @id @default(uuid())
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String

  name      String?
  value     String
  commands  ServerCommand[]
  settings  ServerSettings[]
  processes Process[]
}

model ServerCommand {
  id               String         @id @default(uuid())
  serverCategory   ServerCategory @relation(fields: [serverCategoryId], references: [id], onDelete: Cascade)
  serverCategoryId String
  name             String?
  value            String
  status           CommandStatus  @default(DISABLED)
  runningProgress  Int?
  type             CommandType
}

model ServerSettings {
  id               String         @id @default(uuid())
  serverCategory   ServerCategory @relation(fields: [serverCategoryId], references: [id], onDelete: Cascade)
  serverCategoryId String
  name             String?
  serverName       String
  value            String
  type             SettingType
}

model ServerProperties {
  id       String @id @default(uuid())
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @unique

  status     ServerStatus?
  lastSeenAt DateTime?
  isOnline   Boolean       @default(false)

  startedBy   User?     @relation("StartedBy", fields: [startedById], references: [id], onDelete: NoAction)
  startedById String?
  startedAt   DateTime?

  stoppedBy   User?     @relation("StoppedBy", fields: [stoppedById], references: [id], onDelete: NoAction)
  stoppedById String?
  stoppedAt   DateTime?

  cpuInfo    CPUInfo?
  memoryInfo MemoryInfo?

  uptime BigInt?

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  cPUInfoId    String?
  memoryInfoId String?
  diskInfo     DiskInfo[]
}

model CPUInfo {
  id                 String           @id @default(uuid())
  cores              Int?
  physicalCores      Int?
  currentLoad        Float?
  currentLoadUser    Float?
  currentLoadSystem  Float?
  ServerProperties   ServerProperties @relation(fields: [serverPropertiesId], references: [id], onDelete: Cascade)
  serverPropertiesId String           @unique
}

model MemoryInfo {
  id                 String           @id @default(uuid())
  total              BigInt?
  free               BigInt?
  ServerProperties   ServerProperties @relation(fields: [serverPropertiesId], references: [id], onDelete: Cascade)
  serverPropertiesId String           @unique
}

model DiskInfo {
  id                 String           @id @default(uuid())
  fs                 String?
  type               String?
  used               BigInt?
  available          BigInt?
  name               String?
  mediaType          DiskType?
  ServerProperties   ServerProperties @relation(fields: [serverPropertiesId], references: [id], onDelete: Cascade)
  serverPropertiesId String
}

model Process {
  id        String    @id @default(uuid())
  startedAt DateTime  @default(now())
  stoppedAt DateTime?
  name      String

  startedBy   User   @relation(fields: [startedById], references: [id])
  startedById String

  category   ServerCategory? @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  categoryId String?

  status ServerProcessStatus
  logs   ProcessLog[]
}

model ProcessLog {
  id        String           @id @default(uuid())
  message   String
  timestamp DateTime         @default(now())
  level     ProcessLogLevel? @default(LOG)
  process   Process          @relation(fields: [processId], references: [id], onDelete: Cascade)
  processId String
}
