// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
  OWNER
}

enum AccountStatus {
  CREATED
  EMAIL_VERIFICATION
  ACTIVE
  DISABLED
}

enum SocialMediaType {
  FACEBOOK
  INSTAGRAM
  TWITTER
  TIKTOK
  LINKEDIN
  GITHUB
}

enum FileType {
  IMAGE
}

enum ServerSessionStatus {
  UNKNOWN
  STARTED
  ONGOING
  CLOSED
  ENDED
  FAILED
}

enum ServerStatus {
  UNKNOWN
  OFFLINE
  ONLINE
  ERROR
  MAINTENANCE
  WAKE_IN_PROGRESS
}

model User {
  id           String  @id @default(uuid())
  role         Role    @default(USER)
  email        String  @unique
  hashPassword String?

  accountStatus AccountStatus @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  firstName     String?
  lastName      String?

  sessions        Session[]
  authorOfImages  ImageData[]   @relation("author")
  creatorOfImages ImageData[]   @relation("creator")
  socialMedia     SocialMedia[]

  avatar           Image?             @relation(fields: [avatarId], references: [id])
  avatarId         String?            @unique
  serverSessions   Process[]
  serverProperties ServerProperties[]
}

model SocialMedia {
  id       String          @id @default(uuid())
  username String
  link     String
  type     SocialMediaType
  author   User            @relation(fields: [authorId], references: [id])
  authorId String
}

model Session {
  id           String  @id
  platform     String?
  browser      String?
  os           String?
  refreshToken String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model ImageData {
  id           String   @id @default(uuid())
  localization String
  dateTaken    DateTime

  title       String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User    @relation(fields: [createdById], references: [id], name: "creator")
  createdById String
  author      User?   @relation(fields: [authorId], references: [id], name: "author")
  authorId    String?

  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String @unique
}

model Image {
  id           String      @id @default(uuid())
  originalUrl  String
  coverUrl     String
  lowResUrl    String
  data         ImageData?
  dimensions   Dimensions? @relation(fields: [dimensionsId], references: [id], onDelete: Cascade)
  dimensionsId String?     @unique
  avatar       User?
}

model Dimensions {
  id     String @id @default(uuid())
  width  String
  height String
  image  Image?
}

model Server {
  id   String @id @default(uuid())
  name String

  ipAddress String
  location  String?

  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  properties ServerProperties?
}

model ServerProperties {
  id       String @id @default(uuid())
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @unique

  status      ServerStatus?
  startedBy   User?         @relation(fields: [startedById], references: [id], onDelete: NoAction)
  startedById String?

  cpuInfo    CPUInfo?
  memoryInfo MemoryInfo?

  uptime BigInt?

  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  cPUInfoId    String?
  memoryInfoId String?
  diskInfo     DiskInfo[]
}

model CPUInfo {
  id                 String           @id @default(uuid())
  cores              Int?
  physicalCores      Int?
  currentLoad        Float?
  currentLoadUser    Float?
  currentLoadSystem  Float?
  ServerProperties   ServerProperties @relation(fields: [serverPropertiesId], references: [id], onDelete: Cascade)
  serverPropertiesId String           @unique
}

model MemoryInfo {
  id                 String           @id @default(uuid())
  total              BigInt?
  free               BigInt?
  ServerProperties   ServerProperties @relation(fields: [serverPropertiesId], references: [id], onDelete: Cascade)
  serverPropertiesId String           @unique
}

model DiskInfo {
  id                 String           @id @default(uuid())
  fs                 String?
  type               String?
  used               BigInt?
  available          BigInt?
  ServerProperties   ServerProperties @relation(fields: [serverPropertiesId], references: [id], onDelete: Cascade)
  serverPropertiesId String
}

model Process {
  id        String    @id @default(uuid())
  startedAt DateTime  @default(now())
  stoppedAt DateTime?
  name      String

  startedBy   User                @relation(fields: [startedById], references: [id])
  startedById String
  status      ServerSessionStatus
  logs        ProcessLog[]
}

model ProcessLog {
  id        String   @id @default(uuid())
  message   String
  timestamp DateTime @default(now())

  session   Process @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String
}
