// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MODERATOR
  ADMIN
  OWNER
}

enum SocialMediaType {
  FACEBOOK
  INSTAGRAM
  TWITTER
  TIKTOK
  LINKEDIN
  GITHUB
}

enum FileType {
  IMAGE
}

model User {
  id           String  @id @default(uuid())
  role         Role    @default(USER)
  email        String  @unique
  hashPassword String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String?
  lastName  String?

  sessions        Session[]
  authorOfImages  ImageData[]   @relation("author")
  creatorOfImages ImageData[]   @relation("creator")
  socialMedia     SocialMedia[]

  avatar   Image?  @relation(fields: [avatarId], references: [id])
  avatarId String? @unique
}

model SocialMedia {
  id       String          @id @default(uuid())
  username String
  link     String
  type     SocialMediaType
  author   User            @relation(fields: [authorId], references: [id])
  authorId String
}

model Session {
  id           String  @id
  platform     String?
  browser      String?
  os           String?
  refreshToken String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model ImageData {
  id           String   @id @default(uuid())
  localization String
  dateTaken    DateTime

  title       String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User    @relation(fields: [createdById], references: [id], name: "creator")
  createdById String
  author      User?   @relation(fields: [authorId], references: [id], name: "author")
  authorId    String?

  image   Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String @unique
}

model Image {
  id           String      @id @default(uuid())
  originalUrl  String
  coverUrl     String
  lowResUrl    String
  data         ImageData?
  dimensions   Dimensions? @relation(fields: [dimensionsId], references: [id], onDelete: Cascade)
  dimensionsId String?     @unique
  avatar       User?
}

model Dimensions {
  id     String @id @default(uuid())
  width  String
  height String
  image  Image?
}
